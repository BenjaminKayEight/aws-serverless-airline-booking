type Bed @model @auth(rules: [{allow: private}]) {
  id: ID!
  bedCode: String!
}

type Stay @model @auth(rules: [{allow: private}]) {
  id: ID!
  checkInDate: AWSDate
  checkOutDate: AWSDate
  stayPrice: Float
  bedBooked: Bed @connection
}

type Booking @model(subscriptions: null) @auth(rules: [{allow: owner, ownerField: "customer", identityField: "sub", operations: [read]}, {allow: groups, groups: ["Admin"]}]) @key(name: "ByCustomerStatus", fields: ["customer", "status"], queryField: "getBookingByStatus") {
  id: ID!
  status: BookingStatus
  paymentToken: String
  checkedIn: Boolean
  customer: String
  createdAt: String
  BookingReference: String
  stayBooked: Stay @connection
}

enum BookingStatus {
  UNCONFIRMED
  CONFIRMED
  CANCELLED
}

input CreateBookingInput {
  id: ID
  status: BookingStatus
  paymentToken: String!
  checkedIn: Boolean
  customer: String
  bookingOutboundFlightId: ID!
}

type Loyalty {
  points: Int
  level: String
  remainingPoints: Int
}

type Mutation {
  processBooking(input: CreateBookingInput!): Booking
}

type Query {
  getLoyalty(customer: String): Loyalty
}
 